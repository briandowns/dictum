#!/usr/bin/env dictu

import Env;
import HTTP;
import JSON;
import Path;
import Process;
import System;

from Argparse import Parser;

const VERSION = "v0.1.0",
      USAGE = "Usage: dictum <command> <args>

Options:
    install       install the given module
    uninstall     uninstall the given module
    info          get the info for the given module
    help          help menu
    version       version information

Examples: 
    dictum install slog
    dictum info slog
";

const GLOBAL_MODS   = "/usr/local/lib/dictu",
      LOCAL_MODS    = "{}/.dictu",
      MOD_DATA_FILE = "dictum.json";

// setupEnv checks for needed directories and creates them
// if they don't exist.
def setupEnv() {
    const home = Env.get("HOME");
    const dictuLocalModsPath = LOCAL_MODS.format(home);

    if (not Path.exists(dictuLocalModsPath)) {
        System.mkdir(dictuLocalModsPath);
    }

    if (not Path.exists(GLOBAL_MODS)) {
        System.mkdir(GLOBAL_MODS);
    }
}

// findModule searches the user and system paths for the 
// given module.
def findModule(name) {
    const home = Env.get("HOME");
    const dictuLocalModsPath = LOCAL_MODS.format(home);

    if (Path.exists("{}/{}".format(dictuLocalModsPath, name))) {
        return Success("{}/{}".format(dictuLocalModsPath, name));
    }
    if (Path.exists("{}/{}".format(GLOBAL_MODS, name))) {
        return Success("{}/{}".format(GLOBAL_MODS, name));
    }

    return Error("{} not found".format(name));
}

// parseModuleConfig reads in the path to given module,
// reads the config file, and JSON.
def parseModuleConfig(modPath) {
    const versionFile = modPath + "/dictum.json";

    with(versionFile, "r") {
        return config = JSON.parse(file.read()).match(
            def(result) => result, 
            def(error) => {
                print(error);
                return;
            }
        );
    }
}

{ // main
    var parser = Parser("prog_name", "Program to do all the things", "");
    parser.addBool("-g", "install module globally", false, "global");

    const args = parser.parse().match(
        def (result) => result,
        def (error) => {
            print(error);
            System.exit(1);
        }
    );

    if (System.argv.len() < 2) {
        print(USAGE);
        System.exit(1);
    }

    setupEnv();

    const home = Env.get("HOME");
    const dictuLocalModsPath = LOCAL_MODS.format(home);

    switch (System.argv[1]) {
        case "install": {
            if (System.argv.len() < 3) {
                print("error: missing module name");
                System.exit(1);
            }

            const modName = System.argv[System.argv.len()-1];
            const res = findModule(modName);
            if (res.success()) {
                print("{} module already installed".format(modName));
                System.exit(1);
            }

            var fullModPath;

            if (args.hasAttribute("global")) {
                fullModPath = Path.join(GLOBAL_MODS, modName);
            } else {
                fullModPath = Path.join(dictuLocalModsPath, modName);
            }

            System.mkdir(fullModPath).match(
                def (_) => _,
                def (error) => {
                    print(error);
                    System.exit(1);
                }
            );

            Path.listDir(modName).forEach(def(f) => {
                const srcModFile = Path.join(modName, f);
                const dstModFile = Path.join(fullModPath, f);

                System.copyFile(srcModFile, dstModFile).match(
                    def(_) => _,
                    def(error) => {
                        print(error);
                        System.exit(1);
                    }
                );
            });
        }
        case "uninstall": {
            if (System.argv.len() < 3) {
                print("error: missing module name");
                System.exit(1);
            }

            const modName = System.argv[System.argv.len()-1];
            const modPath = findModule(modName).match(
                def(result) => result,
                def(error) => {
                    print(error);
                    System.exit(1);
                }
            );

            Path.listDir(modPath).forEach(
                def(f) => {
                    System.remove(Path.join(modPath, f));
                }
            );

            System.rmdir(modPath);
        }
        case "info": {
            if (System.argv.len() != 3) {
                print("error: missing module name");
                System.exit(1);
            }

            const modName = System.argv[2];
            const modPath = findModule(modName).match(
                def(result) => result,
                def(error) => {
                    print("{} module not found".format(modName));
                    System.exit(0);
            });

            with(Path.join(modPath, MOD_DATA_FILE), 'r') {
                const modInfo = JSON.parse(file.read()).unwrap();
                print(modInfo);
            }
        }
        case "help": {
            print(USAGE);
        }
        case "version": {
            print("version: {}".format(VERSION));
        }
        default: {
            print("error: unkown command {}".format(System.argv[1]));
            System.exit(1);
        }
    }

    System.exit(0);
}
