#!/usr/bin/env dictu

import Env;
import HTTP;
import JSON;
import Path;
import Process;
import System;

from Argparse import Parser;

const VERSION = "v0.1.0",
      USAGE = "Usage: dictum <command> <args>

Options:
    install       install the given module
    uninstall     uninstall the given module
    modinfo       get the info for the given module
    help          help menu
    version       version information

Examples: 
    dictum install slog

";

const GLOBAL_MODS   = "/usr/local/lib/dictu",
      LOCAL_MODS    = "{}/.dictu",
      MOD_DATA_FILE = "dictum.json";

// setupEnv
def setupEnv() {
    const home = Env.get("HOME");
    const dictuLocalModsPath = LOCAL_MODS.format(home);

    if (not Path.exists(dictuLocalModsPath)) {
        System.mkdir(dictuLocalModsPath);
    }

    if (not Path.exists(GLOBAL_MODS)) {
        System.mkdir(GLOBAL_MODS);
    }
}

// findModule
def findModule(name) {
    const home = Env.get("HOME");
    const dictuLocalModsPath = LOCAL_MODS.format(home);

    if (Path.exists("{}/{}".format(dictuLocalModsPath, name))) {
        return Success("{}/{}".format(dictuLocalModsPath, name));
    }
    if (Path.exists("{}/{}".format(GLOBAL_MODS, name))) {
        return Success("{}/{}".format(GLOBAL_MODS, name));
    }

    return Error("not found");
}

// parseModuleConfig
def parseModuleConfig(modPath) {
    const versionFile = modPath + "/dictum.json";

    with(versionFile, "r") {
        return config = JSON.parse(file.read()).match(
            def(result) => result, 
            def(error) => {
                print(error);
                return;
            }
        );
    }
}

{ // main
    if (System.argv.len() < 2) {
        print(USAGE);
        System.exit(1);
    }

    setupEnv();

    const home = Env.get("HOME");
    const dictuLocalModsPath = LOCAL_MODS.format(home);

    switch (System.argv[1]) {
        case "install": {
            const modName = System.argv[2];
        }
        case "uninstall": {
            const modName = System.argv[2];

            if (Path.exists("{}/{}".format(dictuLocalModsPath, modName))) {
                System.rmdir(dictuLocalModsPath);
            }
            if (Path.exists("{}/{}".format(GLOBAL_MODS, modName))) {
                System.rmdir(GLOBAL_MODS);
            }
        }
        case "info": {
            const modName = System.argv[2];
            const modPath = findModule(modName).match(
                def(result) => result,
                def(error) => {
                    print("{} module not found".format(modName));
                    System.exit(0);
            });

            with(Path.join(modPath, MOD_DATA_FILE), 'r') {
                const modInfo = JSON.parse(file.read()).unwrap();
                print(modInfo);
            }
        }
        case "help": {
            print(USAGE);
        }
        case "version": {
            print("version: {}".format(VERSION));
        }
        default: {
            print("error: unkown command {}".format(System.argv[1]));
            System.exit(1);
        }
    }

    System.exit(0);
}
